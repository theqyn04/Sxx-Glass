import streamlit as st
import torch
import numpy as np
from PIL import Image
import cv2
from diffusers import StableDiffusionInpaintPipeline
import time

# Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.title("üé® AI Ch·ªânh s·ª≠a ·∫¢nh Anime (Local Use Only)")
st.warning("‚ö†Ô∏è ·ª®NG D·ª§NG CH·ªà D√ÄNH CHO NGHI√äN C·ª®U C√Å NH√ÇN - KH√îNG CHIA S·∫∫ RA NGO√ÄI")

# T·∫£i m√¥ h√¨nh
@st.cache_resource
def load_models():
    try:
        with st.spinner('ƒêang t·∫£i m√¥ h√¨nh AI (l·∫ßn ƒë·∫ßu c√≥ th·ªÉ m·∫•t 10-15 ph√∫t)...'):
            # T·∫£i m√¥ h√¨nh Stable Diffusion ƒë·ªÉ inpaint
            inpainting_pipe = StableDiffusionInpaintPipeline.from_pretrained(
                "stabilityai/stable-diffusion-2-inpainting",
                torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
            )
            if torch.cuda.is_available():
                inpainting_pipe = inpainting_pipe.to("cuda")
            
            st.success("ƒê√£ t·∫£i xong m√¥ h√¨nh!")
            return inpainting_pipe
            
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i m√¥ h√¨nh: {str(e)}")
        return None

# H√†m t·∫°o mask cho v√πng qu·∫ßn √°o (demo)
def create_clothing_mask(image, mode="upper"):
    # Chuy·ªÉn ·∫£nh sang numpy array
    img_array = np.array(image)
    height, width = img_array.shape[:2]
    
    # T·∫°o mask r·ªóng
    mask = np.zeros((height, width), dtype=np.uint8)
    
    # X√°c ƒë·ªãnh v√πng c∆° th·ªÉ d·ª±a tr√™n m√†u da (∆∞·ªõc l∆∞·ª£ng)
    # ƒê√¢y l√† ph∆∞∆°ng ph√°p ƒë∆°n gi·∫£n, trong th·ª±c t·∫ø c·∫ßn model segmentation t·ªët h∆°n
    if len(img_array.shape) == 3:
        # Chuy·ªÉn sang HSV ƒë·ªÉ d·ªÖ nh·∫≠n di·ªán m√†u da
        hsv = cv2.cvtColor(img_array, cv2.COLOR_RGB2HSV)
        
        # Ph·∫°m vi m√†u da ∆∞·ªõc l∆∞·ª£ng (c·∫ßn ƒëi·ªÅu ch·ªânh cho ·∫£nh anime)
        lower_skin = np.array([0, 20, 70], dtype=np.uint8)
        upper_skin = np.array([20, 255, 255], dtype=np.uint8)
        
        skin_mask = cv2.inRange(hsv, lower_skin, upper_skin)
        
        # X√°c ƒë·ªãnh v√πng qu·∫ßn √°o d·ª±a tr√™n v√πng kh√¥ng ph·∫£i da
        if mode == "upper":
            # V√πng tr√™n c∆° th·ªÉ (√°o)
            cv2.rectangle(mask, (width//4, height//4), (3*width//4, 3*height//5), 255, -1)
        elif mode == "lower":
            # V√πng d∆∞·ªõi c∆° th·ªÉ (qu·∫ßn)
            cv2.rectangle(mask, (width//4, 3*height//5), (3*width//4, 4*height//5), 255, -1)
        else:
            # To√†n b·ªô qu·∫ßn √°o
            cv2.rectangle(mask, (width//4, height//4), (3*width//4, 4*height//5), 255, -1)
            
        # Lo·∫°i b·ªè v√πng da t·ª´ mask qu·∫ßn √°o
        mask[skin_mask > 0] = 0
        
    return Image.fromarray(mask)

# H√†m ch·ªânh s·ª≠a ·∫£nh v·ªõi prompt
def edit_image_with_prompt(image, mask, prompt, pipe, strength=0.8):
    try:
        # Chu·∫©n b·ªã ·∫£nh v√† mask
        image = image.resize((512, 512))
        mask = mask.resize((512, 512))
        
        # Ch·ªânh s·ª≠a ·∫£nh
        result = pipe(
            prompt=prompt,
            image=image,
            mask_image=mask,
            strength=strength,
            guidance_scale=7.5,
            num_inference_steps=30,
        ).images[0]
        
        return result
    except Exception as e:
        st.error(f"L·ªói khi ch·ªânh s·ª≠a ·∫£nh: {str(e)}")
        return image

# T·∫£i m√¥ h√¨nh
inpainting_pipe = load_models()

# T·∫£i l√™n ·∫£nh
uploaded_file = st.file_uploader("Ch·ªçn ·∫£nh anime...", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    # M·ªü ·∫£nh
    image = Image.open(uploaded_file).convert("RGB")
    col1, col2 = st.columns(2)
    
    with col1:
        st.image(image, caption="·∫¢nh g·ªëc", use_column_width=True)
    
    # Ch·ªçn v√πng ch·ªânh s·ª≠a
    clothing_area = st.radio("Ch·ªçn v√πng mu·ªën ch·ªânh s·ª≠a:", 
                           ["√Åo", "Qu·∫ßn", "To√†n b·ªô trang ph·ª•c"])
    
    mode_map = {"√Åo": "upper", "Qu·∫ßn": "lower", "To√†n b·ªô trang ph·ª•c": "full"}
    
    # T·∫°o mask
    mask = create_clothing_mask(image, mode_map[clothing_area])
    
    with col2:
        # Hi·ªÉn th·ªã mask
        mask_display = np.array(mask)
        mask_display = np.stack([mask_display, mask_display, mask_display], axis=-1)
        st.image(mask_display, caption="V√πng s·∫Ω ƒë∆∞·ª£c ch·ªânh s·ª≠a (m√†u tr·∫Øng)", 
                 use_column_width=True)
    
    # Ch·ªçn lo·∫°i trang ph·ª•c m·ªõi
    outfit_options = {
        "√Åo swimsuit": "swimsuit, bikini, beachwear",
        "√Åo d·∫° h·ªôi": "elegant dress, evening gown, formal wear",
        "ƒê·ªìng ph·ª•c h·ªçc sinh": "school uniform, sailor outfit, anime school uniform",
        "Trang ph·ª•c th·ªÉ thao": "sportswear, athletic outfit, gym clothes",
        "Trang ph·ª•c cosplay": "fantasy outfit, cosplay costume, anime costume",
        "T√πy ch·ªânh": "nh·∫≠p m√¥ t·∫£ c·ªßa b·∫°n"
    }
    
    outfit_choice = st.selectbox("Ch·ªçn lo·∫°i trang ph·ª•c thay th·∫ø:", list(outfit_options.keys()))
    
    if outfit_choice == "T√πy ch·ªânh":
        custom_prompt = st.text_input("Nh·∫≠p m√¥ t·∫£ trang ph·ª•c m·ªõi:")
        prompt = custom_prompt if custom_prompt else "new outfit, anime style"
    else:
        prompt = outfit_options[outfit_choice]
    
    # C∆∞·ªùng ƒë·ªô ch·ªânh s·ª≠a
    strength = st.slider("C∆∞·ªùng ƒë·ªô ch·ªânh s·ª≠a:", 0.1, 1.0, 0.8)
    
    # Ch·ªânh s·ª≠a ·∫£nh
    if st.button("‚ú® T·∫°o trang ph·ª•c m·ªõi"):
        if inpainting_pipe is None:
            st.warning("M√¥ h√¨nh AI ch∆∞a ƒë∆∞·ª£c t·∫£i ƒë·∫ßy ƒë·ªß. Vui l√≤ng ch·ªù...")
        else:
            with st.spinner("AI ƒëang t·∫°o trang ph·ª•c m·ªõi (c√≥ th·ªÉ m·∫•t 1-2 ph√∫t)..."):
                result = edit_image_with_prompt(image, mask, prompt, inpainting_pipe, strength)
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            st.image(result, caption="·∫¢nh ƒë√£ ch·ªânh s·ª≠a", use_column_width=True)
            
            # L∆∞u ·∫£nh
            result.save("edited_anime_image.png")
            with open("edited_anime_image.png", "rb") as file:
                st.download_button(
                    label="üíæ T·∫£i ·∫£nh ƒë√£ ch·ªânh s·ª≠a",
                    data=file,
                    file_name="anime_with_new_outfit.png",
                    mime="image/png"
                )
else:
    st.info("Vui l√≤ng t·∫£i l√™n ·∫£nh anime ƒë·ªÉ b·∫Øt ƒë·∫ßu.")

# Gi·∫£i th√≠ch k·ªπ thu·∫≠t
st.markdown("---")
st.header("üîç Gi·∫£i th√≠ch k·ªπ thu·∫≠t")
st.write("""
·ª®ng d·ª•ng s·ª≠ d·ª•ng m√¥ h√¨nh Stable Diffusion Inpainting ƒë·ªÉ thay th·∫ø trang ph·ª•c:

1. **Nh·∫≠n di·ªán v√πng qu·∫ßn √°o**: S·ª≠ d·ª•ng k·ªπ thu·∫≠t x·ª≠ l√Ω ·∫£nh ƒë·ªÉ x√°c ƒë·ªãnh v√πng qu·∫ßn √°o c·∫ßn thay th·∫ø
2. **T·∫°o mask**: T·∫°o m·∫∑t n·∫° x√°c ƒë·ªãnh v√πng s·∫Ω ƒë∆∞·ª£c ch·ªânh s·ª≠a
3. **T·∫°o n·ªôi dung m·ªõi**: D·ª±a tr√™n prompt m√¥ t·∫£, AI t·∫°o trang ph·ª•c m·ªõi ph√π h·ª£p v·ªõi ng·ªØ c·∫£nh
4. **K·∫øt h·ª£p ·∫£nh**: Gh√©p n·ªôi dung m·ªõi v√†o ·∫£nh g·ªëc m·ªôt c√°ch t·ª± nhi√™n

**L∆∞u √Ω**: K·∫øt qu·∫£ ph·ª• thu·ªôc v√†o ch·∫•t l∆∞·ª£ng ·∫£nh ƒë·∫ßu v√†o v√† m√¥ t·∫£ prompt.
""")

# C·∫£nh b√°o ƒë·∫°o ƒë·ª©c
st.markdown("---")
st.header("üö´ C·∫£nh b√°o quan tr·ªçng")
st.error("""
·ª®NG D·ª§NG N√ÄY CH·ªà ƒê∆Ø·ª¢C S·ª¨ D·ª§NG CHO M·ª§C ƒê√çCH:
- Nghi√™n c·ª©u h·ªçc thu·∫≠t v·ªÅ AI
- Ph√°t tri·ªÉn k·ªπ thu·∫≠t x·ª≠ l√Ω ·∫£nh
- S·ª≠ d·ª•ng c√° nh√¢n v·ªõi ·∫£nh c·ªßa ch√≠nh m√¨nh

KH√îNG S·ª¨ D·ª§NG ƒê·ªÇ:
- T·∫°o n·ªôi dung khi√™u d√¢m
- X√¢m ph·∫°m quy·ªÅn ri√™ng t∆∞ ng∆∞·ªùi kh√°c
- Chia s·∫ª n·ªôi dung nh·∫°y c·∫£m
""")